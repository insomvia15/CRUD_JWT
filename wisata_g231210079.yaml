openapi: "3.0.2"
info:
  title: API Wisata
  description: Dokumentasi API Wisata Matkul Rekayasa Web
  version: '1.0'
  termsOfService: http://swagger.io/terms/
  contact:
    email: admin@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers: 
  - url: http://localhost:8080/json/server
tags:
  - name: tokoen
    description: Endpoint untuk mendapatkan token dengan akun login (username dan password)
                    dan mengambil token dari tabel user
  - name: CRUD
    description: Endpoint untuk API CRUD data wisata dengan Autorisasi token JWT
paths:
  /wisata:
    get:
      tags:
        - CRUD
      description: Endpoint API untuk mengambil semua data wisata
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wisata'
    post:
      tags:
        - CRUD
      description: Endpoint API untuk tambah data wisata
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/insertWisata'
          application/xml:
            schema:
              $ref: '#/components/schemas/insertWisata'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/insertWisata'
      responses:
        '200':
          description: Sukses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wisata'
  /wisata/{id}:
    get:
      tags:
        - CRUD
      parameters:
        - name: id
          in: path
          required: true
          description: id_wisata
          schema:
            type: string
            format: int64
      description: Endpoint API untuk mengambil data wisata tertentu sesuai ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wisata'
            application/xml:
              schema:
                $ref: '#/components/schemas/Wisata'
    put:
      tags:
        - CRUD
      parameters:
        - name: id
          in: path
          required: true
          description: id wisata
          schema:
            type: integer
            format: int64
      description: Update data tertentu
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/insertWisata'
      responses:
        '200':
          description: OK, sukses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wisata'
    delete:
      tags:
        - CRUD
      parameters:
        - name: id
          in: path
          required: true
          description: id_wisata
          schema:
            type: integer
            format: int64
      description: Hapus data tertentu
      responses:
        '200':
          description: OK, sukses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Wisata'
components:
  schemas:
    Wisata:  
      type: object
      properties:
        id_wisata:
          type: integer
          format: int64
          example: 1
        kota:
          type: string
          example: SEMARANG
        tarif:
          type: string
          example: 20000000
    insertWisata:
      type: object
      properties:
        kota:
          type: string
          example: SEMARANG
        landmark: 
          type: string
          example: LAWANG SEWU
        tarif:
          type: string
          example: 20000000
          